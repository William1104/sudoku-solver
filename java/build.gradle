plugins {
    id 'java'
    id "org.sonarqube" version "3.0"
}

java {
    modularity.inferModulePath = true
}

group 'hin'
version '0.1'

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
    }
}
sourceSets {
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ['src/test/resources']
    }
}

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

dependencies {
    implementation 'info.picocli:picocli:4.6.1'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.1'

    implementation 'org.eclipse.collections:eclipse-collections-api:10.4.0'
    implementation 'org.eclipse.collections:eclipse-collections:10.4.0'
    implementation 'com.google.guava:guava:30.1.1-jre'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.1'
    testImplementation 'org.assertj:assertj-core:3.17.1'

    jmhImplementation 'org.openjdk.jmh:jmh-core:1.29'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.29'
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

classes.finalizedBy(jmhClasses)
